-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.ai_analysis_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  analysis_type character varying NOT NULL,
  input_data jsonb NOT NULL,
  ai_response text NOT NULL,
  confidence_score numeric,
  execution_time_ms integer,
  created_at timestamp with time zone DEFAULT now(),
  created_by uuid,
  CONSTRAINT ai_analysis_logs_pkey PRIMARY KEY (id),
  CONSTRAINT ai_analysis_logs_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.ai_inventory_forecasts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  product_id uuid,
  forecast_date date NOT NULL,
  predicted_demand integer NOT NULL,
  confidence_level numeric,
  reorder_suggestion integer,
  reorder_urgency character varying DEFAULT 'normal'::character varying,
  factors jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_inventory_forecasts_pkey PRIMARY KEY (id),
  CONSTRAINT ai_inventory_forecasts_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id)
);
CREATE TABLE public.ai_metrics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  metric_date date NOT NULL,
  metric_hour integer NOT NULL,
  efficiency_score numeric,
  customer_satisfaction numeric,
  table_utilization numeric,
  kitchen_load numeric,
  predicted_orders integer,
  actual_orders integer,
  predicted_revenue numeric,
  actual_revenue numeric,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_metrics_pkey PRIMARY KEY (id)
);
CREATE TABLE public.ai_recommendations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  recommendation_type character varying NOT NULL,
  title character varying NOT NULL,
  description text NOT NULL,
  priority integer DEFAULT 3,
  status character varying DEFAULT 'pending'::character varying,
  confidence_score numeric,
  estimated_impact jsonb,
  target_table character varying,
  target_id uuid,
  expires_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_recommendations_pkey PRIMARY KEY (id)
);
CREATE TABLE public.categories (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  restaurant_id uuid,
  name character varying NOT NULL,
  description text,
  sort_order integer DEFAULT 0,
  color character varying DEFAULT '#3B82F6'::character varying,
  icon character varying DEFAULT 'üçΩÔ∏è'::character varying,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT categories_pkey PRIMARY KEY (id),
  CONSTRAINT categories_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.restaurants(id)
);
CREATE TABLE public.combo_choices (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  combo_id uuid NOT NULL,
  category_id uuid NOT NULL,
  min_selections integer DEFAULT 1,
  max_selections integer DEFAULT 1,
  sort_order integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT combo_choices_pkey PRIMARY KEY (id),
  CONSTRAINT combo_choices_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.categories(id),
  CONSTRAINT combo_choices_combo_id_fkey FOREIGN KEY (combo_id) REFERENCES public.combo_products(id)
);
CREATE TABLE public.combo_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  combo_id uuid NOT NULL,
  product_id uuid NOT NULL,
  quantity integer NOT NULL DEFAULT 1,
  is_optional boolean DEFAULT false,
  additional_price numeric DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT combo_items_pkey PRIMARY KEY (id),
  CONSTRAINT combo_items_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id)
);
CREATE TABLE public.combo_products (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL,
  description text,
  price numeric NOT NULL,
  combo_type character varying NOT NULL CHECK (combo_type::text = ANY (ARRAY['fixed'::character varying, 'selectable'::character varying]::text[])),
  is_available boolean DEFAULT true,
  preparation_time integer DEFAULT 15,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  category_id uuid,
  CONSTRAINT combo_products_pkey PRIMARY KEY (id),
  CONSTRAINT combo_products_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.categories(id)
);
CREATE TABLE public.combo_selection_options (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  rule_id uuid NOT NULL,
  product_id uuid NOT NULL,
  additional_price numeric DEFAULT 0,
  is_default boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT combo_selection_options_pkey PRIMARY KEY (id),
  CONSTRAINT combo_selection_options_rule_id_fkey FOREIGN KEY (rule_id) REFERENCES public.combo_selection_rules(id),
  CONSTRAINT combo_selection_options_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id)
);
CREATE TABLE public.combo_selection_rules (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  combo_id uuid NOT NULL,
  category_id uuid NOT NULL,
  selection_name character varying NOT NULL,
  min_selections integer DEFAULT 1,
  max_selections integer DEFAULT 1,
  is_required boolean DEFAULT true,
  display_order integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT combo_selection_rules_pkey PRIMARY KEY (id),
  CONSTRAINT combo_selection_rules_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.categories(id)
);
CREATE TABLE public.invoices (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  order_id uuid,
  type character varying NOT NULL CHECK (type::text = ANY (ARRAY['receipt'::character varying, 'personal'::character varying, 'company'::character varying]::text[])),
  invoice_number character varying,
  tax_id character varying,
  company_name character varying,
  buyer_email character varying,
  buyer_phone character varying,
  subtotal numeric NOT NULL,
  tax_amount numeric NOT NULL,
  total_amount numeric NOT NULL,
  issued_at timestamp with time zone DEFAULT now(),
  void_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT invoices_pkey PRIMARY KEY (id)
);
CREATE TABLE public.order_combo_selections (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  order_item_id uuid NOT NULL,
  rule_id uuid NOT NULL,
  selected_product_id uuid NOT NULL,
  quantity integer DEFAULT 1,
  additional_price numeric DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT order_combo_selections_pkey PRIMARY KEY (id),
  CONSTRAINT order_combo_selections_order_item_id_fkey FOREIGN KEY (order_item_id) REFERENCES public.order_items(id),
  CONSTRAINT order_combo_selections_rule_id_fkey FOREIGN KEY (rule_id) REFERENCES public.combo_selection_rules(id),
  CONSTRAINT order_combo_selections_selected_product_id_fkey FOREIGN KEY (selected_product_id) REFERENCES public.products(id)
);
CREATE TABLE public.order_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  order_id uuid,
  product_id uuid,
  product_name character varying NOT NULL,
  product_sku character varying,
  quantity integer NOT NULL DEFAULT 1,
  unit_price numeric NOT NULL,
  total_price numeric NOT NULL,
  special_instructions text,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'confirmed'::character varying, 'preparing'::character varying, 'ready'::character varying, 'served'::character varying, 'cancelled'::character varying]::text[])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT order_items_pkey PRIMARY KEY (id),
  CONSTRAINT order_items_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id),
  CONSTRAINT order_items_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id)
);
CREATE TABLE public.orders (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  restaurant_id uuid,
  table_id uuid,
  order_number character varying NOT NULL UNIQUE,
  table_number integer,
  customer_name character varying,
  customer_phone character varying,
  subtotal numeric DEFAULT 0,
  tax_amount numeric DEFAULT 0,
  total_amount numeric DEFAULT 0,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'confirmed'::character varying, 'preparing'::character varying, 'ready'::character varying, 'served'::character varying, 'completed'::character varying, 'cancelled'::character varying]::text[])),
  payment_status character varying DEFAULT 'unpaid'::character varying CHECK (payment_status::text = ANY (ARRAY['unpaid'::character varying, 'partial'::character varying, 'paid'::character varying, 'refunded'::character varying]::text[])),
  payment_method character varying,
  notes text,
  created_by character varying,
  served_at timestamp with time zone,
  completed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  ai_optimized boolean DEFAULT false,
  ai_estimated_prep_time integer,
  ai_recommendations jsonb,
  customer_count integer DEFAULT 1,
  CONSTRAINT orders_pkey PRIMARY KEY (id),
  CONSTRAINT orders_table_id_fkey FOREIGN KEY (table_id) REFERENCES public.tables(id),
  CONSTRAINT orders_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.restaurants(id)
);
CREATE TABLE public.payments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  order_id uuid,
  method character varying NOT NULL CHECK (method::text = ANY (ARRAY['cash'::character varying, 'card'::character varying, 'mobile'::character varying, 'voucher'::character varying, 'points'::character varying]::text[])),
  amount numeric NOT NULL,
  received_amount numeric,
  change_amount numeric,
  transaction_id character varying,
  card_last_four character varying,
  mobile_provider character varying,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'completed'::character varying, 'failed'::character varying, 'refunded'::character varying]::text[])),
  processed_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT payments_pkey PRIMARY KEY (id)
);
CREATE TABLE public.production_records (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  restaurant_id uuid,
  recipe_id uuid,
  produced_item_id uuid NOT NULL,
  produced_item_type character varying NOT NULL,
  quantity_produced numeric NOT NULL,
  total_cost numeric NOT NULL,
  production_time integer,
  quality_rating integer DEFAULT 5,
  notes text,
  produced_by character varying,
  produced_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT production_records_pkey PRIMARY KEY (id),
  CONSTRAINT production_records_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.restaurants(id),
  CONSTRAINT production_records_recipe_id_fkey FOREIGN KEY (recipe_id) REFERENCES public.recipes(id)
);
CREATE TABLE public.products (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  restaurant_id uuid,
  category_id uuid,
  name character varying NOT NULL,
  description text,
  sku character varying UNIQUE,
  price numeric NOT NULL DEFAULT 0,
  cost numeric DEFAULT 0,
  image_url text,
  sort_order integer DEFAULT 0,
  is_available boolean DEFAULT true,
  is_active boolean DEFAULT true,
  actual_stock numeric DEFAULT 0,
  virtual_stock numeric DEFAULT 0,
  total_available numeric DEFAULT 0,
  min_stock numeric DEFAULT 0,
  preparation_time integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  ai_popularity_score numeric DEFAULT 0.5,
  ai_recommended boolean DEFAULT false,
  prep_time_minutes integer DEFAULT 15,
  CONSTRAINT products_pkey PRIMARY KEY (id),
  CONSTRAINT products_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.restaurants(id),
  CONSTRAINT products_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.categories(id)
);
CREATE TABLE public.purchase_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  purchase_id uuid,
  raw_material_id uuid,
  quantity numeric NOT NULL,
  unit character varying NOT NULL,
  unit_cost numeric NOT NULL,
  total_cost numeric NOT NULL,
  expiry_date date,
  lot_number character varying,
  quality_check boolean DEFAULT true,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT purchase_items_pkey PRIMARY KEY (id),
  CONSTRAINT purchase_items_purchase_id_fkey FOREIGN KEY (purchase_id) REFERENCES public.purchase_records(id),
  CONSTRAINT purchase_items_raw_material_id_fkey FOREIGN KEY (raw_material_id) REFERENCES public.raw_materials(id)
);
CREATE TABLE public.purchase_records (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  restaurant_id uuid,
  supplier_id uuid,
  purchase_number character varying NOT NULL UNIQUE,
  order_date date NOT NULL,
  delivery_date date,
  total_amount numeric NOT NULL DEFAULT 0,
  tax_amount numeric DEFAULT 0,
  discount_amount numeric DEFAULT 0,
  final_amount numeric NOT NULL DEFAULT 0,
  payment_status character varying DEFAULT 'pending'::character varying,
  payment_method character varying,
  invoice_number character varying,
  notes text,
  received_by character varying,
  created_by character varying,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT purchase_records_pkey PRIMARY KEY (id),
  CONSTRAINT purchase_records_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.restaurants(id),
  CONSTRAINT purchase_records_supplier_id_fkey FOREIGN KEY (supplier_id) REFERENCES public.suppliers(id)
);
CREATE TABLE public.raw_materials (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  restaurant_id uuid,
  supplier_id uuid,
  name character varying NOT NULL,
  category character varying NOT NULL,
  unit character varying NOT NULL,
  current_stock numeric NOT NULL DEFAULT 0,
  min_stock numeric NOT NULL DEFAULT 0,
  max_stock numeric NOT NULL DEFAULT 0,
  cost numeric NOT NULL DEFAULT 0,
  expiry_date date,
  storage_location character varying,
  last_restock_date timestamp with time zone,
  sku character varying UNIQUE,
  barcode character varying,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT raw_materials_pkey PRIMARY KEY (id),
  CONSTRAINT raw_materials_supplier_id_fkey FOREIGN KEY (supplier_id) REFERENCES public.suppliers(id),
  CONSTRAINT raw_materials_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.restaurants(id)
);
CREATE TABLE public.receipts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  order_id uuid,
  receipt_number character varying NOT NULL UNIQUE,
  items jsonb NOT NULL,
  subtotal numeric NOT NULL,
  tax_amount numeric NOT NULL,
  total_amount numeric NOT NULL,
  payment_method character varying NOT NULL,
  received_amount numeric,
  change_amount numeric,
  issued_at timestamp with time zone DEFAULT now(),
  printed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT receipts_pkey PRIMARY KEY (id)
);
CREATE TABLE public.recipe_ingredients (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  recipe_id uuid NOT NULL,
  ingredient_id uuid NOT NULL,
  ingredient_type character varying NOT NULL,
  quantity numeric NOT NULL,
  unit character varying NOT NULL,
  notes text,
  is_optional boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT recipe_ingredients_pkey PRIMARY KEY (id),
  CONSTRAINT recipe_ingredients_recipe_id_fkey FOREIGN KEY (recipe_id) REFERENCES public.recipes(id)
);
CREATE TABLE public.recipes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  restaurant_id uuid,
  name character varying NOT NULL,
  type character varying NOT NULL,
  target_id uuid NOT NULL,
  target_type character varying NOT NULL,
  yield_quantity numeric NOT NULL DEFAULT 1,
  preparation_time integer NOT NULL DEFAULT 0,
  difficulty character varying DEFAULT 'easy'::character varying,
  instructions text,
  cost_calculation character varying DEFAULT 'auto'::character varying,
  manual_cost numeric,
  labor_cost numeric DEFAULT 0,
  overhead_cost numeric DEFAULT 0,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT recipes_pkey PRIMARY KEY (id),
  CONSTRAINT recipes_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.restaurants(id)
);
CREATE TABLE public.reservations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  table_id uuid,
  customer_name character varying NOT NULL,
  customer_phone character varying NOT NULL,
  party_size integer NOT NULL CHECK (party_size > 0),
  reservation_time timestamp with time zone NOT NULL,
  duration_minutes integer DEFAULT 120,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'confirmed'::character varying, 'seated'::character varying, 'cancelled'::character varying, 'no_show'::character varying]::text[])),
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT reservations_pkey PRIMARY KEY (id)
);
CREATE TABLE public.restaurants (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL,
  address text,
  phone character varying,
  email character varying,
  tax_rate numeric DEFAULT 0.1000,
  currency character varying DEFAULT 'TWD'::character varying,
  timezone character varying DEFAULT 'Asia/Taipei'::character varying,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT restaurants_pkey PRIMARY KEY (id)
);
CREATE TABLE public.semi_finished_products (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  restaurant_id uuid,
  name character varying NOT NULL,
  category character varying NOT NULL,
  unit character varying NOT NULL,
  actual_stock numeric NOT NULL DEFAULT 0,
  min_actual_stock numeric NOT NULL DEFAULT 0,
  virtual_stock numeric NOT NULL DEFAULT 0,
  total_available numeric NOT NULL DEFAULT 0,
  preparation_time integer NOT NULL DEFAULT 0,
  shelf_life integer NOT NULL DEFAULT 24,
  actual_cost numeric NOT NULL DEFAULT 0,
  virtual_cost numeric NOT NULL DEFAULT 0,
  auto_restock boolean DEFAULT false,
  restock_threshold numeric DEFAULT 0,
  sku character varying UNIQUE,
  recipe_id uuid,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT semi_finished_products_pkey PRIMARY KEY (id),
  CONSTRAINT semi_finished_products_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.restaurants(id)
);
CREATE TABLE public.stock_movements (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  restaurant_id uuid,
  item_id uuid NOT NULL,
  item_type character varying NOT NULL,
  movement_type character varying NOT NULL,
  quantity numeric NOT NULL,
  unit character varying NOT NULL,
  cost_per_unit numeric,
  total_cost numeric,
  reference_type character varying,
  reference_id uuid,
  notes text,
  created_by character varying,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT stock_movements_pkey PRIMARY KEY (id),
  CONSTRAINT stock_movements_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.restaurants(id)
);
CREATE TABLE public.suppliers (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  restaurant_id uuid,
  name character varying NOT NULL,
  contact_person character varying,
  phone character varying,
  email character varying,
  address text,
  payment_terms character varying,
  delivery_days character varying,
  min_order_amount numeric DEFAULT 0,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT suppliers_pkey PRIMARY KEY (id),
  CONSTRAINT suppliers_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.restaurants(id)
);
CREATE TABLE public.table_reservations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  restaurant_id uuid,
  table_id uuid,
  customer_name character varying NOT NULL,
  customer_phone character varying,
  customer_email character varying,
  party_size integer NOT NULL,
  reservation_time timestamp with time zone NOT NULL,
  duration_minutes integer DEFAULT 120,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'confirmed'::character varying, 'seated'::character varying, 'completed'::character varying, 'cancelled'::character varying, 'no_show'::character varying]::text[])),
  special_requests text,
  deposit_amount numeric DEFAULT 0,
  deposit_paid boolean DEFAULT false,
  notes text,
  created_by character varying,
  confirmed_at timestamp with time zone,
  seated_at timestamp with time zone,
  completed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT table_reservations_pkey PRIMARY KEY (id),
  CONSTRAINT table_reservations_table_id_fkey FOREIGN KEY (table_id) REFERENCES public.tables(id),
  CONSTRAINT table_reservations_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.restaurants(id)
);
CREATE TABLE public.table_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  restaurant_id uuid,
  table_id uuid,
  reservation_id uuid,
  customer_name character varying,
  party_size integer NOT NULL,
  seated_at timestamp with time zone NOT NULL DEFAULT now(),
  estimated_duration integer DEFAULT 120,
  actual_duration integer,
  status character varying DEFAULT 'occupied'::character varying CHECK (status::text = ANY (ARRAY['occupied'::character varying, 'ordering'::character varying, 'dining'::character varying, 'paying'::character varying, 'completed'::character varying]::text[])),
  total_amount numeric DEFAULT 0,
  service_rating integer,
  notes text,
  completed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT table_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT table_sessions_reservation_id_fkey FOREIGN KEY (reservation_id) REFERENCES public.table_reservations(id),
  CONSTRAINT table_sessions_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.restaurants(id),
  CONSTRAINT table_sessions_table_id_fkey FOREIGN KEY (table_id) REFERENCES public.tables(id)
);
CREATE TABLE public.table_status_history (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  table_id uuid,
  previous_status character varying,
  new_status character varying NOT NULL,
  changed_by uuid,
  reason character varying,
  changed_at timestamp with time zone DEFAULT now(),
  CONSTRAINT table_status_history_pkey PRIMARY KEY (id)
);
CREATE TABLE public.tables (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  restaurant_id uuid,
  table_number integer NOT NULL,
  name character varying,
  capacity integer DEFAULT 4,
  status character varying DEFAULT 'available'::character varying CHECK (status::text = ANY (ARRAY['available'::character varying, 'occupied'::character varying, 'reserved'::character varying, 'cleaning'::character varying, 'maintenance'::character varying]::text[])),
  qr_code text,
  position_x numeric DEFAULT 0,
  position_y numeric DEFAULT 0,
  table_type character varying DEFAULT 'square'::character varying,
  floor_plan character varying DEFAULT 'main'::character varying,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  ai_assigned boolean DEFAULT false,
  ai_assignment_reason text,
  customer_count integer,
  seated_at timestamp with time zone,
  estimated_duration integer,
  CONSTRAINT tables_pkey PRIMARY KEY (id),
  CONSTRAINT tables_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.restaurants(id)
);